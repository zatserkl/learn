//
// File generated by rootcint at Fri Oct 24 15:19:59 2008

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "xmltree_dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void LV_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_LV(void *p = 0);
   static void *newArray_LV(Long_t size, void *p);
   static void delete_LV(void *p);
   static void deleteArray_LV(void *p);
   static void destruct_LV(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LV*)
   {
      ::LV *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LV >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LV", ::LV::Class_Version(), "xmltree.h", 15,
                  typeid(::LV), DefineBehavior(ptr, ptr),
                  &::LV::Dictionary, isa_proxy, 4,
                  sizeof(::LV) );
      instance.SetNew(&new_LV);
      instance.SetNewArray(&newArray_LV);
      instance.SetDelete(&delete_LV);
      instance.SetDeleteArray(&deleteArray_LV);
      instance.SetDestructor(&destruct_LV);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LV*)
   {
      return GenerateInitInstanceLocal((::LV*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LV*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Disk_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Disk(void *p = 0);
   static void *newArray_Disk(Long_t size, void *p);
   static void delete_Disk(void *p);
   static void deleteArray_Disk(void *p);
   static void destruct_Disk(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Disk*)
   {
      ::Disk *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Disk >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Disk", ::Disk::Class_Version(), "xmltree.h", 29,
                  typeid(::Disk), DefineBehavior(ptr, ptr),
                  &::Disk::Dictionary, isa_proxy, 4,
                  sizeof(::Disk) );
      instance.SetNew(&new_Disk);
      instance.SetNewArray(&newArray_Disk);
      instance.SetDelete(&delete_Disk);
      instance.SetDeleteArray(&deleteArray_Disk);
      instance.SetDestructor(&destruct_Disk);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Disk*)
   {
      return GenerateInitInstanceLocal((::Disk*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Disk*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void HCyl_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_HCyl(void *p = 0);
   static void *newArray_HCyl(Long_t size, void *p);
   static void delete_HCyl(void *p);
   static void deleteArray_HCyl(void *p);
   static void destruct_HCyl(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HCyl*)
   {
      ::HCyl *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HCyl >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HCyl", ::HCyl::Class_Version(), "xmltree.h", 52,
                  typeid(::HCyl), DefineBehavior(ptr, ptr),
                  &::HCyl::Dictionary, isa_proxy, 4,
                  sizeof(::HCyl) );
      instance.SetNew(&new_HCyl);
      instance.SetNewArray(&newArray_HCyl);
      instance.SetDelete(&delete_HCyl);
      instance.SetDeleteArray(&deleteArray_HCyl);
      instance.SetDestructor(&destruct_HCyl);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HCyl*)
   {
      return GenerateInitInstanceLocal((::HCyl*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HCyl*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void DCU_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_DCU(void *p = 0);
   static void *newArray_DCU(Long_t size, void *p);
   static void delete_DCU(void *p);
   static void deleteArray_DCU(void *p);
   static void destruct_DCU(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DCU*)
   {
      ::DCU *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DCU >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DCU", ::DCU::Class_Version(), "xmltree.h", 75,
                  typeid(::DCU), DefineBehavior(ptr, ptr),
                  &::DCU::Dictionary, isa_proxy, 4,
                  sizeof(::DCU) );
      instance.SetNew(&new_DCU);
      instance.SetNewArray(&newArray_DCU);
      instance.SetDelete(&delete_DCU);
      instance.SetDeleteArray(&deleteArray_DCU);
      instance.SetDestructor(&destruct_DCU);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DCU*)
   {
      return GenerateInitInstanceLocal((::DCU*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DCU*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void DiskDCU_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_DiskDCU(void *p = 0);
   static void *newArray_DiskDCU(Long_t size, void *p);
   static void delete_DiskDCU(void *p);
   static void deleteArray_DiskDCU(void *p);
   static void destruct_DiskDCU(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DiskDCU*)
   {
      ::DiskDCU *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DiskDCU >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DiskDCU", ::DiskDCU::Class_Version(), "xmltree.h", 108,
                  typeid(::DiskDCU), DefineBehavior(ptr, ptr),
                  &::DiskDCU::Dictionary, isa_proxy, 4,
                  sizeof(::DiskDCU) );
      instance.SetNew(&new_DiskDCU);
      instance.SetNewArray(&newArray_DiskDCU);
      instance.SetDelete(&delete_DiskDCU);
      instance.SetDeleteArray(&deleteArray_DiskDCU);
      instance.SetDestructor(&destruct_DiskDCU);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DiskDCU*)
   {
      return GenerateInitInstanceLocal((::DiskDCU*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DiskDCU*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void HCylDCU_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_HCylDCU(void *p = 0);
   static void *newArray_HCylDCU(Long_t size, void *p);
   static void delete_HCylDCU(void *p);
   static void deleteArray_HCylDCU(void *p);
   static void destruct_HCylDCU(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HCylDCU*)
   {
      ::HCylDCU *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HCylDCU >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HCylDCU", ::HCylDCU::Class_Version(), "xmltree.h", 120,
                  typeid(::HCylDCU), DefineBehavior(ptr, ptr),
                  &::HCylDCU::Dictionary, isa_proxy, 4,
                  sizeof(::HCylDCU) );
      instance.SetNew(&new_HCylDCU);
      instance.SetNewArray(&newArray_HCylDCU);
      instance.SetDelete(&delete_HCylDCU);
      instance.SetDeleteArray(&deleteArray_HCylDCU);
      instance.SetDestructor(&destruct_HCylDCU);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HCylDCU*)
   {
      return GenerateInitInstanceLocal((::HCylDCU*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HCylDCU*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *LV::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LV::Class_Name()
{
   return "LV";
}

//______________________________________________________________________________
const char *LV::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LV*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LV::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LV*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LV::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LV*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LV::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LV*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Disk::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Disk::Class_Name()
{
   return "Disk";
}

//______________________________________________________________________________
const char *Disk::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Disk*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Disk::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Disk*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Disk::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Disk*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Disk::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Disk*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *HCyl::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HCyl::Class_Name()
{
   return "HCyl";
}

//______________________________________________________________________________
const char *HCyl::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HCyl*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HCyl::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HCyl*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HCyl::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HCyl*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HCyl::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HCyl*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *DCU::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DCU::Class_Name()
{
   return "DCU";
}

//______________________________________________________________________________
const char *DCU::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DCU*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DCU::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DCU*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DCU::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DCU*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DCU::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DCU*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *DiskDCU::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DiskDCU::Class_Name()
{
   return "DiskDCU";
}

//______________________________________________________________________________
const char *DiskDCU::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DiskDCU*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DiskDCU::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DiskDCU*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DiskDCU::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DiskDCU*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DiskDCU::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DiskDCU*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *HCylDCU::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HCylDCU::Class_Name()
{
   return "HCylDCU";
}

//______________________________________________________________________________
const char *HCylDCU::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HCylDCU*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HCylDCU::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HCylDCU*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HCylDCU::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HCylDCU*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HCylDCU::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HCylDCU*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void LV::Streamer(TBuffer &R__b)
{
   // Stream an object of class LV.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LV::Class(),this);
   } else {
      R__b.WriteClassBuffer(LV::Class(),this);
   }
}

//______________________________________________________________________________
void LV::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class LV.
      TClass *R__cl = ::LV::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "v", &v);
      R__insp.Inspect(R__cl, R__parent, "i", &i);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LV(void *p) {
      return  p ? new(p) ::LV : new ::LV;
   }
   static void *newArray_LV(Long_t nElements, void *p) {
      return p ? new(p) ::LV[nElements] : new ::LV[nElements];
   }
   // Wrapper around operator delete
   static void delete_LV(void *p) {
      delete ((::LV*)p);
   }
   static void deleteArray_LV(void *p) {
      delete [] ((::LV*)p);
   }
   static void destruct_LV(void *p) {
      typedef ::LV current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LV

//______________________________________________________________________________
void Disk::Streamer(TBuffer &R__b)
{
   // Stream an object of class Disk.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Disk::Class(),this);
   } else {
      R__b.WriteClassBuffer(Disk::Class(),this);
   }
}

//______________________________________________________________________________
void Disk::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Disk.
      TClass *R__cl = ::Disk::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "pcard", &pcard);
      pcard.ShowMembers(R__insp, strcat(R__parent,"pcard.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dig[4]", dig);
      R__insp.Inspect(R__cl, R__parent, "ana[4]", ana);
      R__insp.Inspect(R__cl, R__parent, "RTD[8]", RTD);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Disk(void *p) {
      return  p ? new(p) ::Disk : new ::Disk;
   }
   static void *newArray_Disk(Long_t nElements, void *p) {
      return p ? new(p) ::Disk[nElements] : new ::Disk[nElements];
   }
   // Wrapper around operator delete
   static void delete_Disk(void *p) {
      delete ((::Disk*)p);
   }
   static void deleteArray_Disk(void *p) {
      delete [] ((::Disk*)p);
   }
   static void destruct_Disk(void *p) {
      typedef ::Disk current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Disk

//______________________________________________________________________________
void HCyl::Streamer(TBuffer &R__b)
{
   // Stream an object of class HCyl.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HCyl::Class(),this);
   } else {
      R__b.WriteClassBuffer(HCyl::Class(),this);
   }
}

//______________________________________________________________________________
void HCyl::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class HCyl.
      TClass *R__cl = ::HCyl::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "t", &t);
      R__insp.Inspect(R__cl, R__parent, "air", &air);
      R__insp.Inspect(R__cl, R__parent, "ccu", &ccu);
      ccu.ShowMembers(R__insp, strcat(R__parent,"ccu.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "disk[2]", disk);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HCyl(void *p) {
      return  p ? new(p) ::HCyl : new ::HCyl;
   }
   static void *newArray_HCyl(Long_t nElements, void *p) {
      return p ? new(p) ::HCyl[nElements] : new ::HCyl[nElements];
   }
   // Wrapper around operator delete
   static void delete_HCyl(void *p) {
      delete ((::HCyl*)p);
   }
   static void deleteArray_HCyl(void *p) {
      delete [] ((::HCyl*)p);
   }
   static void destruct_HCyl(void *p) {
      typedef ::HCyl current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HCyl

//______________________________________________________________________________
void DCU::Streamer(TBuffer &R__b)
{
   // Stream an object of class DCU.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(DCU::Class(),this);
   } else {
      R__b.WriteClassBuffer(DCU::Class(),this);
   }
}

//______________________________________________________________________________
void DCU::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class DCU.
      TClass *R__cl = ::DCU::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "LIR", &LIR);
      R__insp.Inspect(R__cl, R__parent, "HIR", &HIR);
      R__insp.Inspect(R__cl, R__parent, "Vaa", &Vaa);
      R__insp.Inspect(R__cl, R__parent, "Vdd", &Vdd);
      R__insp.Inspect(R__cl, R__parent, "rtd2", &rtd2);
      R__insp.Inspect(R__cl, R__parent, "rtd3", &rtd3);
      R__insp.Inspect(R__cl, R__parent, "aoh", &aoh);
      R__insp.Inspect(R__cl, R__parent, "Vpc", &Vpc);
      R__insp.Inspect(R__cl, R__parent, "Vbg", &Vbg);
      R__insp.Inspect(R__cl, R__parent, "ts", &ts);
      R__insp.Inspect(R__cl, R__parent, "ped", &ped);
      R__insp.Inspect(R__cl, R__parent, "Trtd2", &Trtd2);
      R__insp.Inspect(R__cl, R__parent, "Trtd3", &Trtd3);
      R__insp.Inspect(R__cl, R__parent, "Taoh", &Taoh);
      R__insp.Inspect(R__cl, R__parent, "d", &d);
      R__insp.Inspect(R__cl, R__parent, "pc", &pc);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DCU(void *p) {
      return  p ? new(p) ::DCU : new ::DCU;
   }
   static void *newArray_DCU(Long_t nElements, void *p) {
      return p ? new(p) ::DCU[nElements] : new ::DCU[nElements];
   }
   // Wrapper around operator delete
   static void delete_DCU(void *p) {
      delete ((::DCU*)p);
   }
   static void deleteArray_DCU(void *p) {
      delete [] ((::DCU*)p);
   }
   static void destruct_DCU(void *p) {
      typedef ::DCU current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DCU

//______________________________________________________________________________
void DiskDCU::Streamer(TBuffer &R__b)
{
   // Stream an object of class DiskDCU.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(DiskDCU::Class(),this);
   } else {
      R__b.WriteClassBuffer(DiskDCU::Class(),this);
   }
}

//______________________________________________________________________________
void DiskDCU::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class DiskDCU.
      TClass *R__cl = ::DiskDCU::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "dcu[4]", dcu);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DiskDCU(void *p) {
      return  p ? new(p) ::DiskDCU : new ::DiskDCU;
   }
   static void *newArray_DiskDCU(Long_t nElements, void *p) {
      return p ? new(p) ::DiskDCU[nElements] : new ::DiskDCU[nElements];
   }
   // Wrapper around operator delete
   static void delete_DiskDCU(void *p) {
      delete ((::DiskDCU*)p);
   }
   static void deleteArray_DiskDCU(void *p) {
      delete [] ((::DiskDCU*)p);
   }
   static void destruct_DiskDCU(void *p) {
      typedef ::DiskDCU current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DiskDCU

//______________________________________________________________________________
void HCylDCU::Streamer(TBuffer &R__b)
{
   // Stream an object of class HCylDCU.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HCylDCU::Class(),this);
   } else {
      R__b.WriteClassBuffer(HCylDCU::Class(),this);
   }
}

//______________________________________________________________________________
void HCylDCU::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class HCylDCU.
      TClass *R__cl = ::HCylDCU::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "t", &t);
      R__insp.Inspect(R__cl, R__parent, "disk[2]", disk);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HCylDCU(void *p) {
      return  p ? new(p) ::HCylDCU : new ::HCylDCU;
   }
   static void *newArray_HCylDCU(Long_t nElements, void *p) {
      return p ? new(p) ::HCylDCU[nElements] : new ::HCylDCU[nElements];
   }
   // Wrapper around operator delete
   static void delete_HCylDCU(void *p) {
      delete ((::HCylDCU*)p);
   }
   static void deleteArray_HCylDCU(void *p) {
      delete [] ((::HCylDCU*)p);
   }
   static void destruct_HCylDCU(void *p) {
      typedef ::HCylDCU current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HCylDCU

/********************************************************
* xmltree_dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && (__GNUC__ > 3) && (__GNUC_MINOR__ > 1)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablexmltree_dict();

extern "C" void G__set_cpp_environmentxmltree_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("xmltree.h");
  G__cpp_reset_tagtablexmltree_dict();
}
#include <new>
extern "C" int G__cpp_dllrevxmltree_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* LV */
static int G__xmltree_dict_84_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LV* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LV[n];
     } else {
       p = new((void*) gvp) LV[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LV;
     } else {
       p = new((void*) gvp) LV;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_LV);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LV*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LV::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LV::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LV::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LV::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LV*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LV::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LV::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LV::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_84_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LV::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__xmltree_dict_84_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LV* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LV(*(LV*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_LV);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LV G__TLV;
static int G__xmltree_dict_84_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LV*) (soff+(sizeof(LV)*i)))->~G__TLV();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LV*) (soff))->~G__TLV();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__xmltree_dict_84_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LV* dest = (LV*) G__getstructoffset();
   *dest = *(LV*) libp->para[0].ref;
   const LV& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Disk */
static int G__xmltree_dict_85_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Disk* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Disk[n];
     } else {
       p = new((void*) gvp) Disk[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Disk;
     } else {
       p = new((void*) gvp) Disk;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_Disk);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Disk*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Disk::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Disk::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Disk::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Disk::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Disk*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Disk::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Disk::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Disk::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_85_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Disk::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__xmltree_dict_85_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Disk* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Disk(*(Disk*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_Disk);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Disk G__TDisk;
static int G__xmltree_dict_85_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Disk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Disk*) (soff+(sizeof(Disk)*i)))->~G__TDisk();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Disk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Disk*) (soff))->~G__TDisk();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__xmltree_dict_85_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Disk* dest = (Disk*) G__getstructoffset();
   *dest = *(Disk*) libp->para[0].ref;
   const Disk& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HCyl */
static int G__xmltree_dict_86_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCyl* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCyl[n];
     } else {
       p = new((void*) gvp) HCyl[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCyl;
     } else {
       p = new((void*) gvp) HCyl;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_HCyl);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCyl*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HCyl::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCyl::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HCyl::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HCyl::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCyl*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCyl::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCyl::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCyl::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_86_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCyl::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__xmltree_dict_86_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HCyl* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HCyl(*(HCyl*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_HCyl);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HCyl G__THCyl;
static int G__xmltree_dict_86_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HCyl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HCyl*) (soff+(sizeof(HCyl)*i)))->~G__THCyl();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HCyl*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HCyl*) (soff))->~G__THCyl();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__xmltree_dict_86_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCyl* dest = (HCyl*) G__getstructoffset();
   *dest = *(HCyl*) libp->para[0].ref;
   const HCyl& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DCU */
static int G__xmltree_dict_87_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DCU* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DCU[n];
     } else {
       p = new((void*) gvp) DCU[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DCU;
     } else {
       p = new((void*) gvp) DCU;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_DCU);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DCU*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DCU::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DCU::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DCU::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DCU::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DCU*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DCU::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DCU::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DCU::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_87_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DCU::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__xmltree_dict_87_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DCU* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DCU(*(DCU*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_DCU);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DCU G__TDCU;
static int G__xmltree_dict_87_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DCU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DCU*) (soff+(sizeof(DCU)*i)))->~G__TDCU();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DCU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DCU*) (soff))->~G__TDCU();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__xmltree_dict_87_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DCU* dest = (DCU*) G__getstructoffset();
   *dest = *(DCU*) libp->para[0].ref;
   const DCU& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DiskDCU */
static int G__xmltree_dict_88_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DiskDCU* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DiskDCU[n];
     } else {
       p = new((void*) gvp) DiskDCU[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DiskDCU;
     } else {
       p = new((void*) gvp) DiskDCU;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DiskDCU*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DiskDCU::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DiskDCU::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DiskDCU::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DiskDCU::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DiskDCU*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DiskDCU::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DiskDCU::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DiskDCU::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_88_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DiskDCU::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__xmltree_dict_88_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DiskDCU* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DiskDCU(*(DiskDCU*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DiskDCU G__TDiskDCU;
static int G__xmltree_dict_88_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DiskDCU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DiskDCU*) (soff+(sizeof(DiskDCU)*i)))->~G__TDiskDCU();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DiskDCU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DiskDCU*) (soff))->~G__TDiskDCU();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__xmltree_dict_88_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DiskDCU* dest = (DiskDCU*) G__getstructoffset();
   *dest = *(DiskDCU*) libp->para[0].ref;
   const DiskDCU& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HCylDCU */
static int G__xmltree_dict_89_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCylDCU* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCylDCU[n];
     } else {
       p = new((void*) gvp) HCylDCU[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCylDCU;
     } else {
       p = new((void*) gvp) HCylDCU;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCylDCU*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HCylDCU::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCylDCU::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HCylDCU::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HCylDCU::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCylDCU*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCylDCU::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCylDCU::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCylDCU::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__xmltree_dict_89_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCylDCU::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__xmltree_dict_89_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HCylDCU* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HCylDCU(*(HCylDCU*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HCylDCU G__THCylDCU;
static int G__xmltree_dict_89_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HCylDCU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HCylDCU*) (soff+(sizeof(HCylDCU)*i)))->~G__THCylDCU();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HCylDCU*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HCylDCU*) (soff))->~G__THCylDCU();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__xmltree_dict_89_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCylDCU* dest = (HCylDCU*) G__getstructoffset();
   *dest = *(HCylDCU*) libp->para[0].ref;
   const HCylDCU& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* LV */

/* Disk */

/* HCyl */

/* DCU */

/* DiskDCU */

/* HCylDCU */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncxmltree_dict {
 public:
  G__Sizep2memfuncxmltree_dict(): p(&G__Sizep2memfuncxmltree_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncxmltree_dict::*p)();
};

size_t G__get_sizep2memfuncxmltree_dict()
{
  G__Sizep2memfuncxmltree_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancexmltree_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__xmltree_dictLN_LV))) {
     LV *G__Lderived;
     G__Lderived=(LV*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__xmltree_dictLN_LV),G__get_linked_tagnum(&G__xmltree_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__xmltree_dictLN_Disk))) {
     Disk *G__Lderived;
     G__Lderived=(Disk*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__xmltree_dictLN_Disk),G__get_linked_tagnum(&G__xmltree_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__xmltree_dictLN_HCyl))) {
     HCyl *G__Lderived;
     G__Lderived=(HCyl*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCyl),G__get_linked_tagnum(&G__xmltree_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__xmltree_dictLN_DCU))) {
     DCU *G__Lderived;
     G__Lderived=(DCU*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DCU),G__get_linked_tagnum(&G__xmltree_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU))) {
     DiskDCU *G__Lderived;
     G__Lderived=(DiskDCU*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU),G__get_linked_tagnum(&G__xmltree_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU))) {
     HCylDCU *G__Lderived;
     G__Lderived=(HCylDCU*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU),G__get_linked_tagnum(&G__xmltree_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablexmltree_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* LV */
static void G__setup_memvarLV(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__xmltree_dictLN_LV));
   { LV *p; p=(LV*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->v)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"v=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->i)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"i=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Disk */
static void G__setup_memvarDisk(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__xmltree_dictLN_Disk));
   { Disk *p; p=(Disk*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pcard)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_LV),-1,-1,1,"pcard=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dig)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_LV),-1,-1,1,"dig[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ana)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_LV),-1,-1,1,"ana[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->RTD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"RTD[8]=",0,"hardware readout RTDs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HCyl */
static void G__setup_memvarHCyl(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCyl));
   { HCyl *p; p=(HCyl*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->t)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t=",0,"astronomocal time - Jan 1, 2007 (in seconds)");
   G__memvar_setup((void*)((long)(&p->air)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"air=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ccu)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_LV),-1,-1,1,"ccu=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->disk)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_Disk),-1,-1,1,"disk[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DCU */
static void G__setup_memvarDCU(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DCU));
   { DCU *p; p=(DCU*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->LIR)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"LIR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HIR)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"HIR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Vaa)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Vaa=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Vdd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Vdd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rtd2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rtd2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rtd3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rtd3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->aoh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"aoh=",0,"AOH RTD");
   G__memvar_setup((void*)((long)(&p->Vpc)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Vpc=",0,"Port Card Vpower");
   G__memvar_setup((void*)((long)(&p->Vbg)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Vbg=",0,"DCU reference BandGap voltage");
   G__memvar_setup((void*)((long)(&p->ts)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ts=",0,"DCU diode-based Temperature Sensor");
   G__memvar_setup((void*)((long)(&p->ped)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ped=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Trtd2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Trtd2=",0,"T in degrees of Celsius, Trtd2 = (2/3850e-6)*(1 - rtd2/Vpc)");
   G__memvar_setup((void*)((long)(&p->Trtd3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Trtd3=",0,"Trtd3 = (2/3850e-6)*(1 - rtd3/Vpc)");
   G__memvar_setup((void*)((long)(&p->Taoh)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Taoh=",0,"Taoh = (2/3850e-6)*(1 - aoh/Vpc)");
   G__memvar_setup((void*)((long)(&p->d)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"d=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pc)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DiskDCU */
static void G__setup_memvarDiskDCU(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU));
   { DiskDCU *p; p=(DiskDCU*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->dcu)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_DCU),-1,-1,1,"dcu[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HCylDCU */
static void G__setup_memvarHCylDCU(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU));
   { HCylDCU *p; p=(HCylDCU*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->t)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"t=",0,"astronomocal time - Jan 1, 2007 (in seconds)");
   G__memvar_setup((void*)((long)(&p->disk)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU),-1,-1,1,"disk[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__xmltree_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarxmltree_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncLV(void) {
   /* LV */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__xmltree_dictLN_LV));
   G__memfunc_setup("LV",162,G__xmltree_dict_84_0_1, 105, G__get_linked_tagnum(&G__xmltree_dictLN_LV), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__xmltree_dict_84_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__xmltree_dict_84_0_3, 85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&LV::Class), 0);
   G__memfunc_setup("Class_Name",982,G__xmltree_dict_84_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LV::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__xmltree_dict_84_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&LV::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__xmltree_dict_84_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&LV::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__xmltree_dict_84_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__xmltree_dict_84_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LV::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__xmltree_dict_84_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&LV::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__xmltree_dict_84_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&LV::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__xmltree_dict_84_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&LV::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("LV", 162, G__xmltree_dict_84_0_15, (int) ('i'), G__get_linked_tagnum(&G__xmltree_dictLN_LV), -1, 0, 1, 1, 1, 0, "u 'LV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LV", 288, G__xmltree_dict_84_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__xmltree_dict_84_0_17, (int) ('u'), G__get_linked_tagnum(&G__xmltree_dictLN_LV), -1, 1, 1, 1, 1, 0, "u 'LV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDisk(void) {
   /* Disk */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__xmltree_dictLN_Disk));
   G__memfunc_setup("Disk",395,G__xmltree_dict_85_0_1, 105, G__get_linked_tagnum(&G__xmltree_dictLN_Disk), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__xmltree_dict_85_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__xmltree_dict_85_0_3, 85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&Disk::Class), 0);
   G__memfunc_setup("Class_Name",982,G__xmltree_dict_85_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&Disk::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__xmltree_dict_85_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&Disk::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__xmltree_dict_85_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&Disk::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__xmltree_dict_85_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__xmltree_dict_85_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&Disk::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__xmltree_dict_85_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&Disk::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__xmltree_dict_85_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&Disk::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__xmltree_dict_85_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&Disk::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("Disk", 395, G__xmltree_dict_85_0_15, (int) ('i'), G__get_linked_tagnum(&G__xmltree_dictLN_Disk), -1, 0, 1, 1, 1, 0, "u 'Disk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Disk", 521, G__xmltree_dict_85_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__xmltree_dict_85_0_17, (int) ('u'), G__get_linked_tagnum(&G__xmltree_dictLN_Disk), -1, 1, 1, 1, 1, 0, "u 'Disk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHCyl(void) {
   /* HCyl */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCyl));
   G__memfunc_setup("HCyl",368,G__xmltree_dict_86_0_1, 105, G__get_linked_tagnum(&G__xmltree_dictLN_HCyl), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__xmltree_dict_86_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__xmltree_dict_86_0_3, 85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&HCyl::Class), 0);
   G__memfunc_setup("Class_Name",982,G__xmltree_dict_86_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&HCyl::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__xmltree_dict_86_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&HCyl::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__xmltree_dict_86_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&HCyl::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__xmltree_dict_86_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__xmltree_dict_86_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&HCyl::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__xmltree_dict_86_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&HCyl::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__xmltree_dict_86_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&HCyl::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__xmltree_dict_86_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&HCyl::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("HCyl", 368, G__xmltree_dict_86_0_15, (int) ('i'), G__get_linked_tagnum(&G__xmltree_dictLN_HCyl), -1, 0, 1, 1, 1, 0, "u 'HCyl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HCyl", 494, G__xmltree_dict_86_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__xmltree_dict_86_0_17, (int) ('u'), G__get_linked_tagnum(&G__xmltree_dictLN_HCyl), -1, 1, 1, 1, 1, 0, "u 'HCyl' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDCU(void) {
   /* DCU */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DCU));
   G__memfunc_setup("DCU",220,G__xmltree_dict_87_0_1, 105, G__get_linked_tagnum(&G__xmltree_dictLN_DCU), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__xmltree_dict_87_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__xmltree_dict_87_0_3, 85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&DCU::Class), 0);
   G__memfunc_setup("Class_Name",982,G__xmltree_dict_87_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&DCU::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__xmltree_dict_87_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&DCU::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__xmltree_dict_87_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&DCU::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__xmltree_dict_87_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__xmltree_dict_87_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&DCU::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__xmltree_dict_87_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&DCU::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__xmltree_dict_87_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&DCU::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__xmltree_dict_87_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&DCU::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("DCU", 220, G__xmltree_dict_87_0_15, (int) ('i'), G__get_linked_tagnum(&G__xmltree_dictLN_DCU), -1, 0, 1, 1, 1, 0, "u 'DCU' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DCU", 346, G__xmltree_dict_87_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__xmltree_dict_87_0_17, (int) ('u'), G__get_linked_tagnum(&G__xmltree_dictLN_DCU), -1, 1, 1, 1, 1, 0, "u 'DCU' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDiskDCU(void) {
   /* DiskDCU */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU));
   G__memfunc_setup("DiskDCU",615,G__xmltree_dict_88_0_1, 105, G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__xmltree_dict_88_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__xmltree_dict_88_0_3, 85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&DiskDCU::Class), 0);
   G__memfunc_setup("Class_Name",982,G__xmltree_dict_88_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&DiskDCU::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__xmltree_dict_88_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&DiskDCU::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__xmltree_dict_88_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&DiskDCU::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__xmltree_dict_88_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__xmltree_dict_88_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&DiskDCU::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__xmltree_dict_88_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&DiskDCU::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__xmltree_dict_88_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&DiskDCU::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__xmltree_dict_88_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&DiskDCU::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("DiskDCU", 615, G__xmltree_dict_88_0_15, (int) ('i'), G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU), -1, 0, 1, 1, 1, 0, "u 'DiskDCU' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DiskDCU", 741, G__xmltree_dict_88_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__xmltree_dict_88_0_17, (int) ('u'), G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU), -1, 1, 1, 1, 1, 0, "u 'DiskDCU' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHCylDCU(void) {
   /* HCylDCU */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU));
   G__memfunc_setup("HCylDCU",588,G__xmltree_dict_89_0_1, 105, G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__xmltree_dict_89_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__xmltree_dict_89_0_3, 85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&HCylDCU::Class), 0);
   G__memfunc_setup("Class_Name",982,G__xmltree_dict_89_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&HCylDCU::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__xmltree_dict_89_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&HCylDCU::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__xmltree_dict_89_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&HCylDCU::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__xmltree_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__xmltree_dict_89_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__xmltree_dict_89_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&HCylDCU::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__xmltree_dict_89_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&HCylDCU::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__xmltree_dict_89_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&HCylDCU::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__xmltree_dict_89_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&HCylDCU::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("HCylDCU", 588, G__xmltree_dict_89_0_15, (int) ('i'), G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU), -1, 0, 1, 1, 1, 0, "u 'HCylDCU' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HCylDCU", 714, G__xmltree_dict_89_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__xmltree_dict_89_0_17, (int) ('u'), G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU), -1, 1, 1, 1, 1, 0, "u 'HCylDCU' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncxmltree_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalxmltree_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcxmltree_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__xmltree_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_LV = { "LV" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_Disk = { "Disk" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_HCyl = { "HCyl" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_DCU = { "DCU" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_DiskDCU = { "DiskDCU" , 99 , -1 };
G__linked_taginfo G__xmltree_dictLN_HCylDCU = { "HCylDCU" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablexmltree_dict() {
  G__xmltree_dictLN_TClass.tagnum = -1 ;
  G__xmltree_dictLN_TBuffer.tagnum = -1 ;
  G__xmltree_dictLN_TMemberInspector.tagnum = -1 ;
  G__xmltree_dictLN_TObject.tagnum = -1 ;
  G__xmltree_dictLN_LV.tagnum = -1 ;
  G__xmltree_dictLN_Disk.tagnum = -1 ;
  G__xmltree_dictLN_HCyl.tagnum = -1 ;
  G__xmltree_dictLN_DCU.tagnum = -1 ;
  G__xmltree_dictLN_DiskDCU.tagnum = -1 ;
  G__xmltree_dictLN_HCylDCU.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablexmltree_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__xmltree_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__xmltree_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__xmltree_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__xmltree_dictLN_TObject);
   G__tagtable_setup(G__get_linked_tagnum(&G__xmltree_dictLN_LV),sizeof(LV),-1,292096,(char*)NULL,G__setup_memvarLV,G__setup_memfuncLV);
   G__tagtable_setup(G__get_linked_tagnum(&G__xmltree_dictLN_Disk),sizeof(Disk),-1,292096,(char*)NULL,G__setup_memvarDisk,G__setup_memfuncDisk);
   G__tagtable_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCyl),sizeof(HCyl),-1,291072,(char*)NULL,G__setup_memvarHCyl,G__setup_memfuncHCyl);
   G__tagtable_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DCU),sizeof(DCU),-1,291072,(char*)NULL,G__setup_memvarDCU,G__setup_memfuncDCU);
   G__tagtable_setup(G__get_linked_tagnum(&G__xmltree_dictLN_DiskDCU),sizeof(DiskDCU),-1,291072,(char*)NULL,G__setup_memvarDiskDCU,G__setup_memfuncDiskDCU);
   G__tagtable_setup(G__get_linked_tagnum(&G__xmltree_dictLN_HCylDCU),sizeof(HCylDCU),-1,291072,(char*)NULL,G__setup_memvarHCylDCU,G__setup_memfuncHCylDCU);
}
extern "C" void G__cpp_setupxmltree_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupxmltree_dict()");
  G__set_cpp_environmentxmltree_dict();
  G__cpp_setup_tagtablexmltree_dict();

  G__cpp_setup_inheritancexmltree_dict();

  G__cpp_setup_typetablexmltree_dict();

  G__cpp_setup_memvarxmltree_dict();

  G__cpp_setup_memfuncxmltree_dict();
  G__cpp_setup_globalxmltree_dict();
  G__cpp_setup_funcxmltree_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncxmltree_dict();
  return;
}
class G__cpp_setup_initxmltree_dict {
  public:
    G__cpp_setup_initxmltree_dict() { G__add_setup_func("xmltree_dict",(G__incsetup)(&G__cpp_setupxmltree_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initxmltree_dict() { G__remove_setup_func("xmltree_dict"); }
};
G__cpp_setup_initxmltree_dict G__cpp_setup_initializerxmltree_dict;

